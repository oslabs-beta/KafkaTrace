{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAOH,wGAAwG;AACxG,4GAA4G;AAC5G,4GAA4G;AAC5G,SAAgB,2BAA2B,CACzC,UAAmC,EAAE;IAErC,IAAI,gBAAgB,GAAsB,EAAE,CAAC;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAC9C,8DAA8D;QAC9D,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAQ,CAAC;QACjC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,OAAO,GAAG,2BAA2B,CAAC,MAAM,CAAC,CAAC;YACpD,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACrD;aAAM,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YACvC,gBAAgB,CAAC,IAAI,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC;SACrC;aAAM,IAAK,MAA0B,CAAC,mBAAmB,EAAE;YAC1D,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC/B;KACF;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AAlBD,kEAkBC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Instrumentation,\n  InstrumentationOption,\n} from '@opentelemetry/instrumentation';\n\n// TODO: This part of a workaround to fix https://github.com/open-telemetry/opentelemetry-js/issues/3609\n// If the MeterProvider is not yet registered when instrumentations are registered, all metrics are dropped.\n// This code is obsolete once https://github.com/open-telemetry/opentelemetry-js/issues/3622 is implemented.\nexport function parseInstrumentationOptions(\n  options: InstrumentationOption[] = []\n): Instrumentation[] {\n  let instrumentations: Instrumentation[] = [];\n  for (let i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const option = options[i] as any;\n    if (Array.isArray(option)) {\n      const results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if ((option as Instrumentation).instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n\n  return instrumentations;\n}\n"]}
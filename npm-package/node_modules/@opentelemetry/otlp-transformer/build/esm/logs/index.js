/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __read, __values } from "tslib";
import { toAnyValue, toAttributes, toKeyValue } from '../common/internal';
import { hexToBase64, hrTimeToNanoseconds } from '@opentelemetry/core';
export function createExportLogsServiceRequest(logRecords, useHex) {
    return {
        resourceLogs: logRecordsToResourceLogs(logRecords, useHex),
    };
}
function createResourceMap(logRecords) {
    var e_1, _a;
    var resourceMap = new Map();
    try {
        for (var logRecords_1 = __values(logRecords), logRecords_1_1 = logRecords_1.next(); !logRecords_1_1.done; logRecords_1_1 = logRecords_1.next()) {
            var record = logRecords_1_1.value;
            var resource = record.resource, _b = record.instrumentationScope, name_1 = _b.name, _c = _b.version, version = _c === void 0 ? '' : _c, _d = _b.schemaUrl, schemaUrl = _d === void 0 ? '' : _d;
            var ismMap = resourceMap.get(resource);
            if (!ismMap) {
                ismMap = new Map();
                resourceMap.set(resource, ismMap);
            }
            var ismKey = name_1 + "@" + version + ":" + schemaUrl;
            var records = ismMap.get(ismKey);
            if (!records) {
                records = [];
                ismMap.set(ismKey, records);
            }
            records.push(record);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (logRecords_1_1 && !logRecords_1_1.done && (_a = logRecords_1.return)) _a.call(logRecords_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return resourceMap;
}
function logRecordsToResourceLogs(logRecords, useHex) {
    var resourceMap = createResourceMap(logRecords);
    return Array.from(resourceMap, function (_a) {
        var _b = __read(_a, 2), resource = _b[0], ismMap = _b[1];
        return ({
            resource: {
                attributes: toAttributes(resource.attributes),
                droppedAttributesCount: 0,
            },
            scopeLogs: Array.from(ismMap, function (_a) {
                var _b = __read(_a, 2), scopeLogs = _b[1];
                var _c = scopeLogs[0].instrumentationScope, name = _c.name, version = _c.version, schemaUrl = _c.schemaUrl;
                return {
                    scope: { name: name, version: version },
                    logRecords: scopeLogs.map(function (log) { return toLogRecord(log, useHex); }),
                    schemaUrl: schemaUrl,
                };
            }),
            schemaUrl: undefined,
        });
    });
}
function toLogRecord(log, useHex) {
    var _a, _b, _c, _d, _e;
    return {
        timeUnixNano: hrTimeToNanoseconds(log.hrTime),
        observedTimeUnixNano: hrTimeToNanoseconds(log.hrTimeObserved),
        severityNumber: toSeverityNumber(log.severityNumber),
        severityText: log.severityText,
        body: toAnyValue(log.body),
        attributes: toLogAttributes(log.attributes),
        droppedAttributesCount: 0,
        flags: (_a = log.spanContext) === null || _a === void 0 ? void 0 : _a.traceFlags,
        traceId: useHex
            ? (_b = log.spanContext) === null || _b === void 0 ? void 0 : _b.traceId
            : optionalHexToBase64((_c = log.spanContext) === null || _c === void 0 ? void 0 : _c.traceId),
        spanId: useHex
            ? (_d = log.spanContext) === null || _d === void 0 ? void 0 : _d.spanId
            : optionalHexToBase64((_e = log.spanContext) === null || _e === void 0 ? void 0 : _e.spanId),
    };
}
function toSeverityNumber(severityNumber) {
    return severityNumber;
}
function optionalHexToBase64(str) {
    if (str === undefined)
        return undefined;
    return hexToBase64(str);
}
export function toLogAttributes(attributes) {
    return Object.keys(attributes).map(function (key) { return toKeyValue(key, attributes[key]); });
}
//# sourceMappingURL=index.js.map
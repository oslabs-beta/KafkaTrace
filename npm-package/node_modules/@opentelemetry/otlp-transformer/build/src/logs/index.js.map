{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/logs/index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAUH,iDAA0E;AAC1E,8CAAuE;AAKvE,SAAgB,8BAA8B,CAC5C,UAA+B,EAC/B,MAAgB;IAEhB,OAAO;QACL,YAAY,EAAE,wBAAwB,CAAC,UAAU,EAAE,MAAM,CAAC;KAC3D,CAAC;AACJ,CAAC;AAPD,wEAOC;AAED,SAAS,iBAAiB,CACxB,UAA+B;IAE/B,MAAM,WAAW,GAGb,IAAI,GAAG,EAAE,CAAC;IAEd,KAAK,MAAM,MAAM,IAAI,UAAU,EAAE;QAC/B,MAAM,EACJ,QAAQ,EACR,oBAAoB,EAAE,EAAE,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE,SAAS,GAAG,EAAE,EAAE,GAC7D,GAAG,MAAM,CAAC;QAEX,IAAI,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;YACnB,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;SACnC;QAED,MAAM,MAAM,GAAG,GAAG,IAAI,IAAI,OAAO,IAAI,SAAS,EAAE,CAAC;QACjD,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACjC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAC7B;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACtB;IACD,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,SAAS,wBAAwB,CAC/B,UAA+B,EAC/B,MAAgB;IAEhB,MAAM,WAAW,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAClD,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;QACtD,QAAQ,EAAE;YACR,UAAU,EAAE,IAAA,uBAAY,EAAC,QAAQ,CAAC,UAAU,CAAC;YAC7C,sBAAsB,EAAE,CAAC;SAC1B;QACD,SAAS,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,EAAE;YAC9C,MAAM,EACJ,oBAAoB,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,GACnD,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YACjB,OAAO;gBACL,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;gBACxB,UAAU,EAAE,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;gBAC1D,SAAS;aACV,CAAC;QACJ,CAAC,CAAC;QACF,SAAS,EAAE,SAAS;KACrB,CAAC,CAAC,CAAC;AACN,CAAC;AAED,SAAS,WAAW,CAAC,GAAsB,EAAE,MAAgB;;IAC3D,OAAO;QACL,YAAY,EAAE,IAAA,0BAAmB,EAAC,GAAG,CAAC,MAAM,CAAC;QAC7C,oBAAoB,EAAE,IAAA,0BAAmB,EAAC,GAAG,CAAC,cAAc,CAAC;QAC7D,cAAc,EAAE,gBAAgB,CAAC,GAAG,CAAC,cAAc,CAAC;QACpD,YAAY,EAAE,GAAG,CAAC,YAAY;QAC9B,IAAI,EAAE,IAAA,qBAAU,EAAC,GAAG,CAAC,IAAI,CAAC;QAC1B,UAAU,EAAE,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC;QAC3C,sBAAsB,EAAE,CAAC;QACzB,KAAK,EAAE,MAAA,GAAG,CAAC,WAAW,0CAAE,UAAU;QAClC,OAAO,EAAE,MAAM;YACb,CAAC,CAAC,MAAA,GAAG,CAAC,WAAW,0CAAE,OAAO;YAC1B,CAAC,CAAC,mBAAmB,CAAC,MAAA,GAAG,CAAC,WAAW,0CAAE,OAAO,CAAC;QACjD,MAAM,EAAE,MAAM;YACZ,CAAC,CAAC,MAAA,GAAG,CAAC,WAAW,0CAAE,MAAM;YACzB,CAAC,CAAC,mBAAmB,CAAC,MAAA,GAAG,CAAC,WAAW,0CAAE,MAAM,CAAC;KACjD,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CACvB,cAA0C;IAE1C,OAAO,cAAmE,CAAC;AAC7E,CAAC;AAED,SAAS,mBAAmB,CAAC,GAAuB;IAClD,IAAI,GAAG,KAAK,SAAS;QAAE,OAAO,SAAS,CAAC;IACxC,OAAO,IAAA,kBAAW,EAAC,GAAG,CAAC,CAAC;AAC1B,CAAC;AAED,SAAgB,eAAe,CAAC,UAAyB;IACvD,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAA,qBAAU,EAAC,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9E,CAAC;AAFD,0CAEC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport {\n  ESeverityNumber,\n  IExportLogsServiceRequest,\n  ILogRecord,\n  IResourceLogs,\n} from './types';\nimport { IResource } from '@opentelemetry/resources';\nimport { toAnyValue, toAttributes, toKeyValue } from '../common/internal';\nimport { hexToBase64, hrTimeToNanoseconds } from '@opentelemetry/core';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\nimport { IKeyValue } from '../common/types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\n\nexport function createExportLogsServiceRequest(\n  logRecords: ReadableLogRecord[],\n  useHex?: boolean\n): IExportLogsServiceRequest {\n  return {\n    resourceLogs: logRecordsToResourceLogs(logRecords, useHex),\n  };\n}\n\nfunction createResourceMap(\n  logRecords: ReadableLogRecord[]\n): Map<IResource, Map<string, ReadableLogRecord[]>> {\n  const resourceMap: Map<\n    IResource,\n    Map<string, ReadableLogRecord[]>\n  > = new Map();\n\n  for (const record of logRecords) {\n    const {\n      resource,\n      instrumentationScope: { name, version = '', schemaUrl = '' },\n    } = record;\n\n    let ismMap = resourceMap.get(resource);\n    if (!ismMap) {\n      ismMap = new Map();\n      resourceMap.set(resource, ismMap);\n    }\n\n    const ismKey = `${name}@${version}:${schemaUrl}`;\n    let records = ismMap.get(ismKey);\n    if (!records) {\n      records = [];\n      ismMap.set(ismKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\n\nfunction logRecordsToResourceLogs(\n  logRecords: ReadableLogRecord[],\n  useHex?: boolean\n): IResourceLogs[] {\n  const resourceMap = createResourceMap(logRecords);\n  return Array.from(resourceMap, ([resource, ismMap]) => ({\n    resource: {\n      attributes: toAttributes(resource.attributes),\n      droppedAttributesCount: 0,\n    },\n    scopeLogs: Array.from(ismMap, ([, scopeLogs]) => {\n      const {\n        instrumentationScope: { name, version, schemaUrl },\n      } = scopeLogs[0];\n      return {\n        scope: { name, version },\n        logRecords: scopeLogs.map(log => toLogRecord(log, useHex)),\n        schemaUrl,\n      };\n    }),\n    schemaUrl: undefined,\n  }));\n}\n\nfunction toLogRecord(log: ReadableLogRecord, useHex?: boolean): ILogRecord {\n  return {\n    timeUnixNano: hrTimeToNanoseconds(log.hrTime),\n    observedTimeUnixNano: hrTimeToNanoseconds(log.hrTimeObserved),\n    severityNumber: toSeverityNumber(log.severityNumber),\n    severityText: log.severityText,\n    body: toAnyValue(log.body),\n    attributes: toLogAttributes(log.attributes),\n    droppedAttributesCount: 0,\n    flags: log.spanContext?.traceFlags,\n    traceId: useHex\n      ? log.spanContext?.traceId\n      : optionalHexToBase64(log.spanContext?.traceId),\n    spanId: useHex\n      ? log.spanContext?.spanId\n      : optionalHexToBase64(log.spanContext?.spanId),\n  };\n}\n\nfunction toSeverityNumber(\n  severityNumber: SeverityNumber | undefined\n): ESeverityNumber | undefined {\n  return severityNumber as number | undefined as ESeverityNumber | undefined;\n}\n\nfunction optionalHexToBase64(str: string | undefined): string | undefined {\n  if (str === undefined) return undefined;\n  return hexToBase64(str);\n}\n\nexport function toLogAttributes(attributes: LogAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n"]}
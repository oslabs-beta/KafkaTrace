{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/Logger.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAKH,4CAA6C;AAG7C,2CAAwC;AAExC,qCAAuC;AAGvC,MAAa,MAAM;IAIjB,YACkB,oBAA0C,EAC1D,MAAoB,EACZ,eAA+B;QAFvB,yBAAoB,GAApB,oBAAoB,CAAsB;QAElD,oBAAe,GAAf,eAAe,CAAgB;QAEvC,IAAI,CAAC,aAAa,GAAG,IAAA,oBAAW,EAAC,MAAM,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,eAAe,CAAC,QAAQ,CAAC;IAC3C,CAAC;IAEM,IAAI,CAAC,SAA4B;QACtC,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,IAAI,aAAO,CAAC,MAAM,EAAE,CAAC;QAC7D;;;;WAIG;QACH,MAAM,iBAAiB,GAAG,IAAI,qBAAS,CAAC,IAAI,kBAC1C,OAAO,EAAE,cAAc,IACpB,SAAS,EACZ,CAAC;QACH;;;WAGG;QACH,IAAI,CAAC,2BAA2B,EAAE,CAAC,MAAM,CACvC,iBAAiB,EACjB,cAAc,CACf,CAAC;QACF;;;WAGG;QACH,iBAAiB,CAAC,YAAY,EAAE,CAAC;IACnC,CAAC;IAEM,kBAAkB;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC;IAC5C,CAAC;IAEM,2BAA2B;QAChC,OAAO,IAAI,CAAC,eAAe,CAAC,2BAA2B,EAAE,CAAC;IAC5D,CAAC;CACF;AA9CD,wBA8CC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport type { IResource } from '@opentelemetry/resources';\nimport type { InstrumentationScope } from '@opentelemetry/core';\nimport { context } from '@opentelemetry/api';\n\nimport type { LoggerConfig, LogRecordLimits } from './types';\nimport { LogRecord } from './LogRecord';\nimport { LoggerProvider } from './LoggerProvider';\nimport { mergeConfig } from './config';\nimport { LogRecordProcessor } from './LogRecordProcessor';\n\nexport class Logger implements logsAPI.Logger {\n  public readonly resource: IResource;\n  private readonly _loggerConfig: Required<LoggerConfig>;\n\n  constructor(\n    public readonly instrumentationScope: InstrumentationScope,\n    config: LoggerConfig,\n    private _loggerProvider: LoggerProvider\n  ) {\n    this._loggerConfig = mergeConfig(config);\n    this.resource = _loggerProvider.resource;\n  }\n\n  public emit(logRecord: logsAPI.LogRecord): void {\n    const currentContext = logRecord.context || context.active();\n    /**\n     * If a Logger was obtained with include_trace_context=true,\n     * the LogRecords it emits MUST automatically include the Trace Context from the active Context,\n     * if Context has not been explicitly set.\n     */\n    const logRecordInstance = new LogRecord(this, {\n      context: currentContext,\n      ...logRecord,\n    });\n    /**\n     * the explicitly passed Context,\n     * the current Context, or an empty Context if the Logger was obtained with include_trace_context=false\n     */\n    this.getActiveLogRecordProcessor().onEmit(\n      logRecordInstance,\n      currentContext\n    );\n    /**\n     * A LogRecordProcessor may freely modify logRecord for the duration of the OnEmit call.\n     * If logRecord is needed after OnEmit returns (i.e. for asynchronous processing) only reads are permitted.\n     */\n    logRecordInstance.makeReadonly();\n  }\n\n  public getLogRecordLimits(): LogRecordLimits {\n    return this._loggerConfig.logRecordLimits;\n  }\n\n  public getActiveLogRecordProcessor(): LogRecordProcessor {\n    return this._loggerProvider.getActiveLogRecordProcessor();\n  }\n}\n"]}
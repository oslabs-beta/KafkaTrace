{"version":3,"file":"LoggerProvider.js","sourceRoot":"","sources":["../../src/LoggerProvider.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;;;;;;GAcG;AACH,4CAA0C;AAE1C,sDAAsD;AACtD,wDAA+D;AAC/D,8CAA4D;AAI5D,qCAAkC;AAClC,qCAAgE;AAChE,uEAAoE;AACpE,4EAAyE;AAE5D,QAAA,mBAAmB,GAAG,SAAS,CAAC;AAE7C,MAAa,cAAc;IASzB,YAAY,SAA+B,EAAE;QAN5B,aAAQ,GAAwB,IAAI,GAAG,EAAE,CAAC;QAE1C,mCAA8B,GAAyB,EAAE,CAAC;QAKzE,MAAM,EACJ,QAAQ,GAAG,oBAAQ,CAAC,KAAK,EAAE,EAC3B,eAAe,EACf,uBAAuB,GACxB,GAAG,IAAA,YAAK,EAAC,EAAE,EAAE,IAAA,0BAAiB,GAAE,EAAE,IAAA,0BAAiB,EAAC,MAAM,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,GAAG,oBAAQ,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG;YACb,eAAe;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,uBAAuB;SACxB,CAAC;QAEF,IAAI,CAAC,aAAa,GAAG,IAAI,qBAAc,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAE9D,kDAAkD;QAClD,IAAI,CAAC,gBAAgB,GAAG,IAAI,iDAAuB,CACjD,CAAC,IAAI,+CAAsB,EAAE,CAAC,EAC9B,uBAAuB,CACxB,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,SAAS,CACd,IAAY,EACZ,OAAgB,EAChB,OAA+B;QAE/B,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC/B,UAAI,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;YAC/D,OAAO,sBAAW,CAAC;SACpB;QAED,IAAI,CAAC,IAAI,EAAE;YACT,UAAI,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;SACnE;QACD,MAAM,UAAU,GAAG,IAAI,IAAI,2BAAmB,CAAC;QAC/C,MAAM,GAAG,GAAG,GAAG,UAAU,IAAI,OAAO,IAAI,EAAE,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,KAAI,EAAE,EAAE,CAAC;QACzE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,CACf,GAAG,EACH,IAAI,eAAM,CACR,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,EAAE,EAC5D;gBACE,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;aAC9C,EACD,IAAI,CACL,CACF,CAAC;SACH;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;IACjC,CAAC;IAED;;;OAGG;IACI,qBAAqB,CAAC,SAA6B;QACxD,IAAI,IAAI,CAAC,8BAA8B,CAAC,MAAM,KAAK,CAAC,EAAE;YACpD,yEAAyE;YACzE,4BAA4B;YAC5B,IAAI,CAAC,gBAAgB;iBAClB,QAAQ,EAAE;iBACV,KAAK,CAAC,GAAG,CAAC,EAAE,CACX,UAAI,CAAC,KAAK,CACR,6DAA6D,EAC7D,GAAG,CACJ,CACF,CAAC;SACL;QACD,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,CAAC,gBAAgB,GAAG,IAAI,iDAAuB,CACjD,IAAI,CAAC,8BAA8B,EACnC,IAAI,CAAC,OAAO,CAAC,uBAAwB,CACtC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACI,UAAU;QACf,8BAA8B;QAC9B,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC/B,UAAI,CAAC,IAAI,CAAC,8DAA8D,CAAC,CAAC;YAC1E,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACI,QAAQ;QACb,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC/B,UAAI,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IACnC,CAAC;IAEM,2BAA2B;QAChC,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEO,SAAS;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC;IAC1C,CAAC;CACF;AA/HD,wCA+HC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport type * as logsAPI from '@opentelemetry/api-logs';\nimport { NOOP_LOGGER } from '@opentelemetry/api-logs';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { BindOnceFuture, merge } from '@opentelemetry/core';\n\nimport type { LoggerProviderConfig } from './types';\nimport type { LogRecordProcessor } from './LogRecordProcessor';\nimport { Logger } from './Logger';\nimport { loadDefaultConfig, reconfigureLimits } from './config';\nimport { MultiLogRecordProcessor } from './MultiLogRecordProcessor';\nimport { NoopLogRecordProcessor } from './export/NoopLogRecordProcessor';\n\nexport const DEFAULT_LOGGER_NAME = 'unknown';\n\nexport class LoggerProvider implements logsAPI.LoggerProvider {\n  public readonly resource: IResource;\n\n  private readonly _loggers: Map<string, Logger> = new Map();\n  private _activeProcessor: MultiLogRecordProcessor;\n  private readonly _registeredLogRecordProcessors: LogRecordProcessor[] = [];\n  private readonly _config: LoggerProviderConfig;\n  private _shutdownOnce: BindOnceFuture<void>;\n\n  constructor(config: LoggerProviderConfig = {}) {\n    const {\n      resource = Resource.empty(),\n      logRecordLimits,\n      forceFlushTimeoutMillis,\n    } = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n    this.resource = Resource.default().merge(resource);\n    this._config = {\n      logRecordLimits,\n      resource: this.resource,\n      forceFlushTimeoutMillis,\n    };\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    // add a default processor: NoopLogRecordProcessor\n    this._activeProcessor = new MultiLogRecordProcessor(\n      [new NoopLogRecordProcessor()],\n      forceFlushTimeoutMillis\n    );\n  }\n\n  /**\n   * Get a logger with the configuration of the LoggerProvider.\n   */\n  public getLogger(\n    name: string,\n    version?: string,\n    options?: logsAPI.LoggerOptions\n  ): logsAPI.Logger {\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('A shutdown LoggerProvider cannot provide a Logger');\n      return NOOP_LOGGER;\n    }\n\n    if (!name) {\n      diag.warn('Logger requested without instrumentation scope name.');\n    }\n    const loggerName = name || DEFAULT_LOGGER_NAME;\n    const key = `${loggerName}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._loggers.has(key)) {\n      this._loggers.set(\n        key,\n        new Logger(\n          { name: loggerName, version, schemaUrl: options?.schemaUrl },\n          {\n            logRecordLimits: this._config.logRecordLimits,\n          },\n          this\n        )\n      );\n    }\n    return this._loggers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link LogRecordProcessor} to this logger.\n   * @param processor the new LogRecordProcessor to be added.\n   */\n  public addLogRecordProcessor(processor: LogRecordProcessor) {\n    if (this._registeredLogRecordProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this._activeProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current log record processor',\n            err\n          )\n        );\n    }\n    this._registeredLogRecordProcessors.push(processor);\n    this._activeProcessor = new MultiLogRecordProcessor(\n      this._registeredLogRecordProcessors,\n      this._config.forceFlushTimeoutMillis!\n    );\n  }\n\n  /**\n   * Notifies all registered LogRecordProcessor to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  public forceFlush(): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('invalid attempt to force flush after LoggerProvider shutdown');\n      return this._shutdownOnce.promise;\n    }\n    return this._activeProcessor.forceFlush();\n  }\n\n  /**\n   * Flush all buffered data and shut down the LoggerProvider and all registered\n   * LogRecordProcessor.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  public shutdown(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      diag.warn('shutdown may only be called once per LoggerProvider');\n      return this._shutdownOnce.promise;\n    }\n    return this._shutdownOnce.call();\n  }\n\n  public getActiveLogRecordProcessor(): MultiLogRecordProcessor {\n    return this._activeProcessor;\n  }\n\n  public getActiveLoggers(): Map<string, Logger> {\n    return this._loggers;\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._activeProcessor.shutdown();\n  }\n}\n"]}
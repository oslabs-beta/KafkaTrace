{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EACL,6BAA6B,EAC7B,oCAAoC,EACpC,MAAM,EACN,qBAAqB,GACtB,MAAM,qBAAqB,CAAC;AAG7B,MAAM,UAAU,iBAAiB;IAC/B,OAAO;QACL,uBAAuB,EAAE,KAAK;QAC9B,eAAe,EAAE;YACf,yBAAyB,EACvB,MAAM,EAAE,CAAC,2CAA2C;YACtD,mBAAmB,EAAE,MAAM,EAAE,CAAC,oCAAoC;SACnE;QACD,mBAAmB,EAAE,IAAI;KAC1B,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAAC,UAAwB;;IACxD,IAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,eAAe,CAAC,CAAC;IAEtE,IAAM,eAAe,GAAG,qBAAqB,EAAE,CAAC;IAEhD;;OAEG;IACH,eAAe,CAAC,mBAAmB;QACjC,MAAA,MAAA,MAAA,MAAA,UAAU,CAAC,eAAe,0CAAE,mBAAmB,mCAC/C,eAAe,CAAC,oCAAoC,mCACpD,eAAe,CAAC,0BAA0B,mCAC1C,6BAA6B,CAAC;IAEhC;;OAEG;IACH,eAAe,CAAC,yBAAyB;QACvC,MAAA,MAAA,MAAA,MAAA,UAAU,CAAC,eAAe,0CAAE,yBAAyB,mCACrD,eAAe,CAAC,2CAA2C,mCAC3D,eAAe,CAAC,iCAAiC,mCACjD,oCAAoC,CAAC;IAEvC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,eAAe,iBAAA,EAAE,CAAC,CAAC;AAC5D,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,UAAwB;IAClD,IAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAE3C,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAE7D,MAAM,CAAC,eAAe,GAAG,MAAM,CAAC,MAAM,CACpC,EAAE,EACF,cAAc,CAAC,eAAe,EAC9B,UAAU,CAAC,eAAe,IAAI,EAAE,CACjC,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,IAAM,oBAAoB,GAAG,SAAS,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnv,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\nimport { LoggerConfig } from './types';\n\nexport function loadDefaultConfig() {\n  return {\n    forceFlushTimeoutMillis: 30000,\n    logRecordLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT,\n    },\n    includeTraceContext: true,\n  };\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: LoggerConfig): LoggerConfig {\n  const logRecordLimits = Object.assign({}, userConfig.logRecordLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign log record attribute count limit to use first non null value defined by user or use default value\n   */\n  logRecordLimits.attributeCountLimit =\n    userConfig.logRecordLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign log record attribute value length limit to use first non null value defined by user or use default value\n   */\n  logRecordLimits.attributeValueLengthLimit =\n    userConfig.logRecordLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { logRecordLimits });\n}\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: LoggerConfig): Required<LoggerConfig> {\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign({}, DEFAULT_CONFIG, userConfig);\n\n  target.logRecordLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.logRecordLimits,\n    userConfig.logRecordLimits || {}\n  );\n\n  return target;\n}\n\nexport const DEFAULT_EVENT_DOMAIN = 'default';\n"]}
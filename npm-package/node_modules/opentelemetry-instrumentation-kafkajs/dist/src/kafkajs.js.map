{"version":3,"file":"kafkajs.js","sourceRoot":"","sources":["../../src/kafkajs.ts"],"names":[],"mappings":";;;AAAA,4CAW4B;AAC5B,8EAI6C;AAe7C,uCAAoC;AACpC,2CAAkD;AAClD,oEAMwC;AAExC,MAAa,sBAAuB,SAAQ,qCAAmC;IAK3E,YAAY,SAAuC,EAAE;QACjD,KAAK,CAAC,uCAAuC,EAAE,iBAAO,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;IACvF,CAAC;IAEQ,SAAS,CAAC,SAAuC,EAAE;QACxD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IAES,IAAI;QACV,MAAM,MAAM,GAAoD,IAAI,qDAAmC,CAErG,sBAAsB,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAChC,OAAO,MAAM,CAAC;IAClB,CAAC;IAES,KAAK,CAAC,aAA6B,EAAE,aAAqB;;QAChE,UAAI,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QAEnC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC5B,IAAI,CAAC,KAAK,CAAC,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,KAAK,0CAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,IAAI,CAAC,KAAK,CAAC,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,KAAK,0CAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAE3F,OAAO,aAAa,CAAC;IACzB,CAAC;IAES,OAAO,CAAC,aAA6B;;QAC3C,UAAI,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QACnD,IAAI,2BAAS,CAAC,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,KAAK,0CAAE,SAAS,CAAC,QAAQ,CAAC,EAAE;YACrD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;SAC3D;QACD,IAAI,2BAAS,CAAC,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,KAAK,0CAAE,SAAS,CAAC,QAAQ,CAAC,EAAE;YACrD,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;SAC3D;IACL,CAAC;IAEO,iBAAiB,CAAC,QAA0C;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,GAAG,IAAe;YAC/B,MAAM,WAAW,GAAa,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAE9D,IAAI,2BAAS,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBAC5B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aACpC;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAErE,OAAO,WAAW,CAAC;QACvB,CAAC,CAAC;IACN,CAAC;IAEO,iBAAiB,CAAC,QAA0C;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,GAAG,IAAe;YAC/B,MAAM,WAAW,GAAa,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAE9D,IAAI,2BAAS,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;gBAClC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;aAC1C;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,WAAW,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEjF,IAAI,2BAAS,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;gBAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;aACrC;YACD,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEvE,OAAO,WAAW,CAAC;QACvB,CAAC,CAAC;IACN,CAAC;IAEO,oBAAoB,CAAC,QAA0C;QACnE,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,MAA0B;YACvC,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,WAAW,EAAE;gBACrB,IAAI,2BAAS,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;oBAC/B,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;iBACvC;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aACnF;YACD,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,EAAE;gBACnB,IAAI,2BAAS,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;oBAC7B,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;iBACrC;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;aAC/E;YACD,OAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACvC,CAAC,CAAC;IACN,CAAC;IAEO,4BAA4B,CAAC,QAA+C;QAChF,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,OAA2B;YACxC,MAAM,iBAAiB,GAAY,iBAAW,CAAC,OAAO,CAClD,kBAAY,EACZ,OAAO,CAAC,OAAO,CAAC,OAAO,EACvB,+BAAmB,CACtB,CAAC;YACF,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAChC,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,OAAO,EACf,+CAAwB,CAAC,OAAO,EAChC,iBAAiB,CACpB,CAAC;YAEF,MAAM,kBAAkB,GAAG,aAAO,CAAC,IAAI,CAAC,WAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE;gBACjF,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,EAAE,kBAAkB,CAAC,CAAC;QAC/D,CAAC,CAAC;IACN,CAAC;IAEO,0BAA0B,CAAC,QAA+C;QAC9E,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,OAAyB;YACtC,gKAAgK;YAChK,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CACzC,OAAO,CAAC,KAAK,CAAC,KAAK,EACnB,SAAS,EACT,+CAAwB,CAAC,OAAO,EAChC,kBAAY,CACf,CAAC;YACF,OAAO,aAAO,CAAC,IAAI,CAAC,WAAK,CAAC,OAAO,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE,aAAa,CAAC,EAAE,GAAG,EAAE;gBACrE,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAqB,EAAE,EAAE;;oBAC/D,MAAM,iBAAiB,GAAY,iBAAW,CAAC,OAAO,CAClD,kBAAY,EACZ,OAAO,CAAC,OAAO,EACf,+BAAmB,CACtB,CAAC;oBACF,MAAM,WAAW,GAAG,MAAA,WAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,0CAAE,WAAW,EAAE,CAAC;oBACpE,IAAI,YAAkB,CAAC;oBACvB,IAAI,WAAW,EAAE;wBACb,YAAY,GAAG;4BACX,OAAO,EAAE,WAAW;yBACvB,CAAC;qBACL;oBACD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,OAAO,CAAC,KAAK,CAAC,KAAK,EACnB,OAAO,EACP,+CAAwB,CAAC,OAAO,EAChC,SAAS,EACT,YAAY,CACf,CAAC;gBACN,CAAC,CAAC,CAAC;gBACH,MAAM,mBAAmB,GAAkB,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBAC3E,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC7B,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;IACN,CAAC;IAEO,0BAA0B,CAAC,QAA6D;QAC5F,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,KAAoB;YACjC,MAAM,KAAK,GAAW,KAAK,CAAC,aAAa;iBACpC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAClB,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAC/F;iBACA,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YAE/C,MAAM,cAAc,GAA8B,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAClF,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QAC1D,CAAC,CAAC;IACN,CAAC;IAEO,qBAAqB,CAAC,QAA+D;QACzF,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO,UAAU,MAAsB;YACnC,MAAM,KAAK,GAAW,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;gBAClD,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;YAEH,MAAM,cAAc,GAA8B,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAClF,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QAC1D,CAAC,CAAC;IACN,CAAC;IAEO,kBAAkB,CAAI,KAAa,EAAE,WAAuB;QAChE,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;aAC9B,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;YACd,IAAI,YAAY,CAAC;YACjB,IAAI,OAAO,MAAM,KAAK,QAAQ;gBAAE,YAAY,GAAG,MAAM,CAAC;iBACjD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC;gBAAE,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC;YAEvG,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CACnB,IAAI,CAAC,SAAS,CAAC;gBACX,IAAI,EAAE,oBAAc,CAAC,KAAK;gBAC1B,OAAO,EAAE,YAAY;aACxB,CAAC,CACL,CAAC;YAEF,MAAM,MAAM,CAAC;QACjB,CAAC,CAAC;aACD,OAAO,CAAC,GAAG,EAAE;YACV,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,kBAAkB,CAAC,KAAa,EAAE,OAAqB,EAAE,SAAiB,EAAE,OAAgB,EAAE,IAAW;;QAC7G,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAC9B,KAAK,EACL;YACI,IAAI,EAAE,cAAQ,CAAC,QAAQ;YACvB,UAAU,EAAE;gBACR,CAAC,yCAAkB,CAAC,gBAAgB,CAAC,EAAE,OAAO;gBAC9C,CAAC,yCAAkB,CAAC,qBAAqB,CAAC,EAAE,KAAK;gBACjD,CAAC,yCAAkB,CAAC,0BAA0B,CAAC,EAAE,qDAA8B,CAAC,KAAK;gBACrF,CAAC,yCAAkB,CAAC,mBAAmB,CAAC,EAAE,SAAS;aACtD;YACD,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;SAC5B,EACD,OAAO,CACV,CAAC;QAEF,IAAI,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SAClF;QAED,IAAI,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,YAAY,KAAI,OAAO,EAAE;YACvC,wCAAsB,CAClB,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,YAAa,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EACtD,CAAC,CAAQ,EAAE,EAAE;gBACT,IAAI,CAAC;oBAAE,UAAI,CAAC,KAAK,CAAC,6CAA6C,EAAE,CAAC,CAAC,CAAC;YACxE,CAAC,EACD,IAAI,CACP,CAAC;SACL;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAEO,kBAAkB,CAAC,KAAa,EAAE,OAAgB;;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE;YACtC,IAAI,EAAE,cAAQ,CAAC,QAAQ;YACvB,UAAU,EAAE;gBACR,CAAC,yCAAkB,CAAC,gBAAgB,CAAC,EAAE,OAAO;gBAC9C,CAAC,yCAAkB,CAAC,qBAAqB,CAAC,EAAE,KAAK;gBACjD,CAAC,yCAAkB,CAAC,0BAA0B,CAAC,EAAE,qDAA8B,CAAC,KAAK;aACxF;SACJ,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE;YACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SAClF;QAED,OAAO,CAAC,OAAO,GAAG,MAAA,OAAO,CAAC,OAAO,mCAAI,EAAE,CAAC;QACxC,iBAAW,CAAC,MAAM,CAAC,WAAK,CAAC,OAAO,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;QAE3E,IAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,YAAY,EAAE;YAC5B,wCAAsB,CAClB,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,YAAa,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,EACtD,CAAC,CAAQ,EAAE,EAAE;gBACT,IAAI,CAAC;oBAAE,UAAI,CAAC,KAAK,CAAC,6CAA6C,EAAE,CAAC,CAAC,CAAC;YACxE,CAAC,EACD,IAAI,CACP,CAAC;SACL;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;;AAvQL,wDAwQC;AAvQmB,gCAAS,GAAG,SAAS,CAAC","sourcesContent":["import {\n    SpanKind,\n    Span,\n    SpanStatusCode,\n    Context,\n    propagation,\n    Link,\n    trace,\n    context,\n    diag,\n    ROOT_CONTEXT,\n} from '@opentelemetry/api';\nimport {\n    SemanticAttributes,\n    MessagingOperationValues,\n    MessagingDestinationKindValues,\n} from '@opentelemetry/semantic-conventions';\nimport * as kafkaJs from 'kafkajs';\nimport {\n    Producer,\n    ProducerBatch,\n    RecordMetadata,\n    Message,\n    ProducerRecord,\n    ConsumerRunConfig,\n    EachMessagePayload,\n    KafkaMessage,\n    EachBatchPayload,\n    Consumer,\n} from 'kafkajs';\nimport { KafkaJsInstrumentationConfig } from './types';\nimport { VERSION } from './version';\nimport { bufferTextMapGetter } from './propagtor';\nimport {\n    InstrumentationBase,\n    InstrumentationModuleDefinition,\n    InstrumentationNodeModuleDefinition,\n    safeExecuteInTheMiddle,\n    isWrapped,\n} from '@opentelemetry/instrumentation';\n\nexport class KafkaJsInstrumentation extends InstrumentationBase<typeof kafkaJs> {\n    static readonly component = 'kafkajs';\n    protected override _config!: KafkaJsInstrumentationConfig;\n    private moduleVersion: string;\n\n    constructor(config: KafkaJsInstrumentationConfig = {}) {\n        super('opentelemetry-instrumentation-kafkajs', VERSION, Object.assign({}, config));\n    }\n\n    override setConfig(config: KafkaJsInstrumentationConfig = {}) {\n        this._config = Object.assign({}, config);\n    }\n\n    protected init(): InstrumentationModuleDefinition<typeof kafkaJs> {\n        const module: InstrumentationModuleDefinition<typeof kafkaJs> = new InstrumentationNodeModuleDefinition<\n            typeof kafkaJs\n        >(KafkaJsInstrumentation.component, ['*'], this.patch.bind(this), this.unpatch.bind(this));\n        module.includePrerelease = true;\n        return module;\n    }\n\n    protected patch(moduleExports: typeof kafkaJs, moduleVersion: string) {\n        diag.debug('kafkajs instrumentation: applying patch');\n        this.moduleVersion = moduleVersion;\n\n        this.unpatch(moduleExports);\n        this._wrap(moduleExports?.Kafka?.prototype, 'producer', this._getProducerPatch.bind(this));\n        this._wrap(moduleExports?.Kafka?.prototype, 'consumer', this._getConsumerPatch.bind(this));\n\n        return moduleExports;\n    }\n\n    protected unpatch(moduleExports: typeof kafkaJs) {\n        diag.debug('kafkajs instrumentation: un-patching');\n        if (isWrapped(moduleExports?.Kafka?.prototype.producer)) {\n            this._unwrap(moduleExports.Kafka.prototype, 'producer');\n        }\n        if (isWrapped(moduleExports?.Kafka?.prototype.consumer)) {\n            this._unwrap(moduleExports.Kafka.prototype, 'consumer');\n        }\n    }\n\n    private _getConsumerPatch(original: (...args: unknown[]) => Producer) {\n        const self = this;\n        return function (...args: unknown[]): Consumer {\n            const newConsumer: Consumer = original.apply(this, arguments);\n\n            if (isWrapped(newConsumer.run)) {\n                self._unwrap(newConsumer, 'run');\n            }\n            self._wrap(newConsumer, 'run', self._getConsumerRunPatch.bind(self));\n\n            return newConsumer;\n        };\n    }\n\n    private _getProducerPatch(original: (...args: unknown[]) => Producer) {\n        const self = this;\n        return function (...args: unknown[]): Producer {\n            const newProducer: Producer = original.apply(this, arguments);\n\n            if (isWrapped(newProducer.sendBatch)) {\n                self._unwrap(newProducer, 'sendBatch');\n            }\n            self._wrap(newProducer, 'sendBatch', self._getProducerSendBatchPatch.bind(self));\n\n            if (isWrapped(newProducer.send)) {\n                self._unwrap(newProducer, 'send');\n            }\n            self._wrap(newProducer, 'send', self._getProducerSendPatch.bind(self));\n\n            return newProducer;\n        };\n    }\n\n    private _getConsumerRunPatch(original: (...args: unknown[]) => Producer) {\n        const self = this;\n        return function (config?: ConsumerRunConfig): Promise<void> {\n            if (config?.eachMessage) {\n                if (isWrapped(config.eachMessage)) {\n                    self._unwrap(config, 'eachMessage');\n                }\n                self._wrap(config, 'eachMessage', self._getConsumerEachMessagePatch.bind(self));\n            }\n            if (config?.eachBatch) {\n                if (isWrapped(config.eachBatch)) {\n                    self._unwrap(config, 'eachBatch');\n                }\n                self._wrap(config, 'eachBatch', self._getConsumerEachBatchPatch.bind(self));\n            }\n            return original.call(this, config);\n        };\n    }\n\n    private _getConsumerEachMessagePatch(original: (...args: unknown[]) => Promise<void>) {\n        const self = this;\n        return function (payload: EachMessagePayload): Promise<void> {\n            const propagatedContext: Context = propagation.extract(\n                ROOT_CONTEXT,\n                payload.message.headers,\n                bufferTextMapGetter\n            );\n            const span = self._startConsumerSpan(\n                payload.topic,\n                payload.message,\n                MessagingOperationValues.PROCESS,\n                propagatedContext\n            );\n\n            const eachMessagePromise = context.with(trace.setSpan(propagatedContext, span), () => {\n                return original.apply(this, arguments);\n            });\n            return self._endSpansOnPromise([span], eachMessagePromise);\n        };\n    }\n\n    private _getConsumerEachBatchPatch(original: (...args: unknown[]) => Promise<void>) {\n        const self = this;\n        return function (payload: EachBatchPayload): Promise<void> {\n            // https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/messaging.md#topic-with-multiple-consumers\n            const receivingSpan = self._startConsumerSpan(\n                payload.batch.topic,\n                undefined,\n                MessagingOperationValues.RECEIVE,\n                ROOT_CONTEXT\n            );\n            return context.with(trace.setSpan(context.active(), receivingSpan), () => {\n                const spans = payload.batch.messages.map((message: KafkaMessage) => {\n                    const propagatedContext: Context = propagation.extract(\n                        ROOT_CONTEXT,\n                        message.headers,\n                        bufferTextMapGetter\n                    );\n                    const spanContext = trace.getSpan(propagatedContext)?.spanContext();\n                    let origSpanLink: Link;\n                    if (spanContext) {\n                        origSpanLink = {\n                            context: spanContext,\n                        };\n                    }\n                    return self._startConsumerSpan(\n                        payload.batch.topic,\n                        message,\n                        MessagingOperationValues.PROCESS,\n                        undefined,\n                        origSpanLink\n                    );\n                });\n                const batchMessagePromise: Promise<void> = original.apply(this, arguments);\n                spans.unshift(receivingSpan);\n                return self._endSpansOnPromise(spans, batchMessagePromise);\n            });\n        };\n    }\n\n    private _getProducerSendBatchPatch(original: (batch: ProducerBatch) => Promise<RecordMetadata[]>) {\n        const self = this;\n        return function (batch: ProducerBatch): Promise<RecordMetadata[]> {\n            const spans: Span[] = batch.topicMessages\n                .map((topicMessage) =>\n                    topicMessage.messages.map((message) => self._startProducerSpan(topicMessage.topic, message))\n                )\n                .reduce((acc, val) => acc.concat(val), []);\n\n            const origSendResult: Promise<RecordMetadata[]> = original.apply(this, arguments);\n            return self._endSpansOnPromise(spans, origSendResult);\n        };\n    }\n\n    private _getProducerSendPatch(original: (record: ProducerRecord) => Promise<RecordMetadata[]>) {\n        const self = this;\n        return function (record: ProducerRecord): Promise<RecordMetadata[]> {\n            const spans: Span[] = record.messages.map((message) => {\n                return self._startProducerSpan(record.topic, message);\n            });\n\n            const origSendResult: Promise<RecordMetadata[]> = original.apply(this, arguments);\n            return self._endSpansOnPromise(spans, origSendResult);\n        };\n    }\n\n    private _endSpansOnPromise<T>(spans: Span[], sendPromise: Promise<T>): Promise<T> {\n        return Promise.resolve(sendPromise)\n            .catch((reason) => {\n                let errorMessage;\n                if (typeof reason === 'string') errorMessage = reason;\n                else if (typeof reason === 'object' && reason.hasOwnProperty('message')) errorMessage = reason.message;\n\n                spans.forEach((span) =>\n                    span.setStatus({\n                        code: SpanStatusCode.ERROR,\n                        message: errorMessage,\n                    })\n                );\n\n                throw reason;\n            })\n            .finally(() => {\n                spans.forEach((span) => span.end());\n            });\n    }\n\n    private _startConsumerSpan(topic: string, message: KafkaMessage, operation: string, context: Context, link?: Link) {\n        const span = this.tracer.startSpan(\n            topic,\n            {\n                kind: SpanKind.CONSUMER,\n                attributes: {\n                    [SemanticAttributes.MESSAGING_SYSTEM]: 'kafka',\n                    [SemanticAttributes.MESSAGING_DESTINATION]: topic,\n                    [SemanticAttributes.MESSAGING_DESTINATION_KIND]: MessagingDestinationKindValues.TOPIC,\n                    [SemanticAttributes.MESSAGING_OPERATION]: operation,\n                },\n                links: link ? [link] : [],\n            },\n            context\n        );\n\n        if (this._config.moduleVersionAttributeName) {\n            span.setAttribute(this._config.moduleVersionAttributeName, this.moduleVersion);\n        }\n\n        if (this._config?.consumerHook && message) {\n            safeExecuteInTheMiddle(\n                () => this._config.consumerHook!(span, topic, message),\n                (e: Error) => {\n                    if (e) diag.error(`kafkajs instrumentation: consumerHook error`, e);\n                },\n                true\n            );\n        }\n\n        return span;\n    }\n\n    private _startProducerSpan(topic: string, message: Message) {\n        const span = this.tracer.startSpan(topic, {\n            kind: SpanKind.PRODUCER,\n            attributes: {\n                [SemanticAttributes.MESSAGING_SYSTEM]: 'kafka',\n                [SemanticAttributes.MESSAGING_DESTINATION]: topic,\n                [SemanticAttributes.MESSAGING_DESTINATION_KIND]: MessagingDestinationKindValues.TOPIC,\n            },\n        });\n\n        if (this._config.moduleVersionAttributeName) {\n            span.setAttribute(this._config.moduleVersionAttributeName, this.moduleVersion);\n        }\n\n        message.headers = message.headers ?? {};\n        propagation.inject(trace.setSpan(context.active(), span), message.headers);\n\n        if (this._config?.producerHook) {\n            safeExecuteInTheMiddle(\n                () => this._config.producerHook!(span, topic, message),\n                (e: Error) => {\n                    if (e) diag.error(`kafkajs instrumentation: producerHook error`, e);\n                },\n                true\n            );\n        }\n\n        return span;\n    }\n}\n"]}